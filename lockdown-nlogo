;globals -----------------------------------------------------------------------------------
globals [cell-dimension collided pen show-turtles show-links time growth-factor]
breed [humans human]
breed [hfs hf]
patches-own [ pid ]
humans-own [current-cell infection immunity cell-list abnormalFirstDetected TI TN UI speed]
;-------------------------------------------------------------------------------------------




;basic setup and simulation loop ------------------------------------------------------------

to setup
  ;reset everything
  clear-all
  reset-ticks
  ask patches [
    set pcolor white
  ]
  set collided 0
  set pen false
  set show-turtles true
  set show-links false
  set time 0

  set cell-dimension ((max-pxcor + 1) / cell)

  DRAW-CELL-BORDERS
  DRAW-INFECTION

  SET-CELLS-ID

  DRAW-CITY

  POPULATE

  output-print "DONE SETTING UP!"
end

to go
  clear-output
  tick
  ask humans [ask my-out-links [die]]
  ask humans [
    set heading (heading + (45 - random 90))

    OUT-OF-BORDER
    FORWARD-WITHOUT-COLLISION
    HUMAN-HEALTH

    if (infection > 0) and (infection <= immunity) [set infection (infection + 1)]
  ]

end


;population creation ----------------------------------------------------------------------------------------

to POPULATE
  create-humans population [
    set color green
    set infection 0
    ifelse immune-system > 0
    [set immunity (((random immune-system) + 1) * cell-dimension)]
    [set immunity 0]
    set cell-list []
    set speed 1

    PREVENT-BLOCK-SPAWN

  ]

end

to BUILD-HFS
  let cellx 0
  let celly 0
  let myid 0
  create-hfs (cell * cell) [
    let xrandom (random cell-dimension)
    let yrandom (random cell-dimension)
    setxy ((cell-dimension * cellx) + xrandom) ((cell-dimension * celly) + yrandom)
    while[([pcolor] of patch-here) = red][
      set xrandom (random cell-dimension)
      set yrandom (random cell-dimension)
      setxy ((cell-dimension * cellx) + xrandom) ((cell-dimension * celly) + yrandom)
    ]
     ask patch-here [
      set myid pid
    ]
    set shape "X"
    set color blue
    ask patches in-radius 1.5 [
      if (pid = myid) [
        if (pcolor != red)[
           set pcolor rgb (145)(196)(255)
        ]
      ]
    ]
    set cellx (cellx + 1)
    if (cellx = cell-dimension) [
      set celly (celly + 1)
      set cellx 0
    ]
  ]

end

to HUMAN-HEALTH
  let isNormal DETECT-INFECTION

end

to PREVENT-BLOCK-SPAWN
  setxy random-xcor random-ycor
  if ([pcolor] of patch-here) = black
  [
    PREVENT-BLOCK-SPAWN
  ]
end

;-------------------------------------------------------------------------------------------







;collision detection -------------------------------------------------------------------------------------------

to OUT-OF-BORDER
  let xh ([pxcor] of patch-here)
  let xa ([pxcor] of patch-ahead 1)
  let yh ([pycor] of patch-here)
  let ya ([pycor] of patch-ahead 1)
  if (xh = 0) and (xa = max-pxcor) [set heading (0 - heading)]
  if (xh = max-pxcor) and (xa = 0) [set heading (0 - heading)]
  if (yh = 0) and (ya = max-pycor) [set heading (180 - heading)]
  if (yh = max-pycor) and (ya = 0) [set heading (180 - heading)]
end

to FORWARD-WITHOUT-COLLISION
  let pfront (patch-ahead 1)
  let phere (patch-here)
  let xh ([pxcor] of phere)
  let yh ([pycor] of phere)
  let xf ([pxcor] of pfront)
  let yf ([pycor] of pfront)
  ifelse ([pcolor] of pfront) = black
  [
    ifelse ((xh - xf) != 0) and ((yh - yf) != 0)
    [
      set heading (0 - heading)
      if ([pcolor] of patch-ahead 1) = black [ set heading (180 - heading) ]
    ]
    [
      if ((xh - xf) = 0) [ set heading (180 - heading) ]
      if ((yh - yf) = 0) [ set heading (0 - heading) ]
    ]
  ]
  [ forward speed ]
end

to-report DETECT-INFECTION
  if (infection = 0) and (([pcolor] of patch-here) = red)
  [set infection 1]
  if (infection = immunity + 1)
  [
    if color = green [set color yellow]
    report false
  ]
  report true
end

to-report CELL-HAS-CHANGED [next]
  if current-cell != next
  [
;    ask my-out-links [die]
    report true
  ]
  report false
end

;-------------------------------------------------------------------------------------------










;setting cell ids ---------------------------------------------------------------------------------------

to SET-CELLS-ID
  let cell-id 1
  let x 0
  let y (cell - 1)
  repeat cell [
    repeat cell [
      SET-PATCH-ID (cell-dimension * (cell - cell + x)) (cell-dimension * (cell - cell + y)) cell-id
      set x (x + 1)
      set cell-id (cell-id + 1)
    ]
    set x 0
    set y (y - 1)
  ]
end

to SET-PATCH-ID [x y id]
  let row 0
  let col 0
  repeat cell-dimension [
    repeat cell-dimension [
      ask patch (col + x) (row + y) [
        set pid id
      ]
      set col (col + 1)
    ]
    set col 0
    set row (row + 1)
  ]
end

;-------------------------------------------------------------------------------------------











;Drawing borders -----------------------------------------------------------------------------------

to DRAW-BORDERS
  ask patches [
    sprout 1 [
      set color grey
      set heading 90
      forward 0.5
      set heading 0
      forward 0.5
      pen-down
      let angle 360
      repeat 4 [
        set angle (angle - 90)
        set heading angle
        forward 1
      ]
      die
    ]
  ]
end

to DRAW-CELL-BORDERS
  let row 0
  let column 0
  repeat cell [
    repeat cell [
      ask patch (cell-dimension - 1 + (row * cell-dimension)) (cell-dimension - 1 + (column * cell-dimension)) [
        sprout 1 [
          set color black
          set pen-size 5
          set heading 90
          forward 0.5
          set heading 0
          forward 0.5
          pen-down
          let angle 360
          repeat 4 [
            set angle (angle - 90)
            set heading angle
            forward cell-dimension
          ]
          die
        ]
      ]
      set column (column + 1)
    ]
    set row (row + 1)
  ]
end

to DRAW-INFECTION
  if infection-radius > 0
  [
    let origin (max-pxcor / 2)
    ask patch 39 760 [
      sprout 1 [
        ask patches in-radius infection-radius [set pcolor red]
        die
      ]
    ]
  ]
end

;-------------------------------------------------------------------------------------------









;Drawing obstacles ------------------------------------------------------------------------------------------

to DRAW-CITY
  let block-dimension (cell-dimension / 8)
  let row 0
  let col 0
  let cell-col 0
  let cell-row [1 2 5 6]
  repeat cell [
    repeat cell [
      repeat cell-dimension [
        if ((cell-col mod 2) = 1) [
          foreach cell-row [x ->
            ask patch (col * cell-dimension + cell-col * block-dimension) (col * cell-dimension + x * block-dimension) [
              let i 0
              let j 0
              repeat block-dimension [
                repeat block-dimension [
                  ask patch-at i j [
                    set pcolor black
                  ]
                  set i (i + 1)
                ]
                set i 0
                set j (j + 1)
              ]
            ]
          ]
        ]
        set cell-col (cell-col + 1)
      ]
      set cell-col 0
      set col (col + 1)
    ]
    set row (row + 1)
  ]
end







